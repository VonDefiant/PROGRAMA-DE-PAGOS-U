<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>