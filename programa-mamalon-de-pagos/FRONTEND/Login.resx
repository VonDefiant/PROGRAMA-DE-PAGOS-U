<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>